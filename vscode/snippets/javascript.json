{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"delimeter comment": {
		"prefix": "// import",
		"body": [
			"// import $1",
			"$0",
			"// end import $1"
		]
	},
	"comment": {
		"prefix": "comment",
		"body": [
			"/*************************************************************",
			" * $0",
			" *************************************************************/"
		]
	},
	"delimiter": {
		"prefix": "delimiter",
		"body": "// --------------------------------------------"
	},
	"throttle": {
		"prefix": "throttle",
		"body": [
			"function throttle(func, wait=300, options={leading: true, trailing: false}) {",
			"  var timeout, context, args, result;",
			"  var previous = 0;",
			"  if (!options) options = {};",
			"",
			"  var later = function () {",
			"    previous = options.leading === false ? 0 : new Date().getTime();",
			"    timeout = null;",
			"    result = func.apply(context, args);",
			"    if (!timeout) context = args = null;",
			"    return result;",
			"  };",
			"",
			"  var throttled = function () {",
			"    var now = new Date().getTime();",
			"    if (!previous && options.leading === false) previous = now;",
			"    var remaining = wait - (now - previous);",
			"    context = this;",
			"    args = arguments;",
			"    if (remaining <= 0 || remaining > wait) {",
			"      if (timeout) {",
			"        clearTimeout(timeout);",
			"        timeout = null;",
			"      }",
			"      previous = now;",
			"      func.apply(context, args);",
			"      if (!timeout) context = args = null;",
			"    } else if (!timeout && options.trailing !== false) {",
			"      timeout = setTimeout(later, remaining);",
			"    }",
			"  };",
			"  return throttled;",
			"}",
			"",
			"export { throttle };",
		]
	},
	"debounce": {
		"prefix": "debounce",
		"body": [
			"function debounce(func, wait=500, immediate=true) {",
			"",
			"  var timeout, result;",
			"",
			"  var debounced = function () {",
			"      var context = this;",
			"      var args = arguments;",
			"",
			"      if (timeout) clearTimeout(timeout);",
			"      if (immediate) {",
			"          // 如果已经执行过，不再执行",
			"          var callNow = !timeout;",
			"          timeout = setTimeout(function(){",
			"              timeout = null;",
			"          }, wait)",
			"          if (callNow) result = func.apply(context, args)",
			"      }",
			"      else {",
			"          timeout = setTimeout(function(){",
			"              func.apply(context, args)",
			"          }, wait);",
			"      }",
			"      return result;",
			"  };",
			"",
			"  debounced.cancel = function() {",
			"      clearTimeout(timeout);",
			"      timeout = null;",
			"  };",
			"",
			"  return debounced;",
			"}"
		]
	},
}